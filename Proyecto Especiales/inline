{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b930483",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importar librerias\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy.signal import savgol_filter\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3bec50cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n</xml>\nIndex(['Altitude [m]', 'Time [s]'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#Crear dataframe\n",
    "df = pd.read_csv(\"Datos5.csv\", sep=\",\", encoding=\"latin1\")\n",
    "print(df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "307c46e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n</xml>\n"
     ]
    }
   ],
   "source": [
    "#Extraer valores\n",
    "altitude = df['Altitude [m]']\n",
    "Time = df['Time [s]']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3bb30088",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\4182513486.py:5: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar valores\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "%notebook inline\n",
    "plt.plot(Time, altitude,  color=\"blue\")\n",
    "plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(\"Altura [m]\", fontsize=14)\n",
    "plt.title(\"Altura de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('mi_grafica.png', dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "931a4069",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\1228079319.py:5: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar valores\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "%notebook inline\n",
    "plt.plot(Time, altitude,  color=\"blue\")\n",
    "plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(\"Altura [m]\", fontsize=14)\n",
    "plt.title(\"Altura de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('Altura vs Tiempo.png', dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0ddf7a38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\1228079319.py:5: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar valores\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "%notebook inline\n",
    "plt.plot(Time, altitude,  color=\"blue\")\n",
    "plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(\"Altura [m]\", fontsize=14)\n",
    "plt.title(\"Altura de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('Altura vs Tiempo.png', dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d00dd1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\82294756.py:5: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar valores\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "%notebook inline\n",
    "plt.plot(Time, altitude,  color=\"blue\")\n",
    "plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(\"Altura [m]\", fontsize=14)\n",
    "plt.title(\"Altura de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('Altura_vs_Tiempo.png', dpi=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0c676197",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\3969834746.py:5: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar valores\n",
    "fig = plt.figure(figsize=(10, 6))\n",
    "%notebook inline\n",
    "plt.plot(Time, altitude,  color=\"blue\")\n",
    "plt.plot(Time, altitude, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(\"Altura [m]\", fontsize=14)\n",
    "plt.title(\"Altura de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('Altura_vs_Tiempo.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0c7f5e99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "np.float64(0.09200000000000585)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Maximo intervalo entre valores\n",
    "np.max(np.diff(Time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "99a368cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n</xml>\n"
     ]
    }
   ],
   "source": [
    "h = Time[1] - Time[0]\n",
    "n = len(altitude)\n",
    "V = altitude\n",
    "\n",
    "a = np.zeros(n)\n",
    "\n",
    "for i in range(n):\n",
    "    if i == 0:\n",
    "        a[i] = (-V[i+2] + 4*V[i+1] - 3*V[i]) / (2*h)\n",
    "    elif i == n-1:\n",
    "        a[i] = (3*V[i] - 4*V[i-1] + V[i-2]) / (2*h)\n",
    "    elif i == 1 or i == n-2:\n",
    "        a[i] = (V[i+1] - V[i-1]) / (2*h)\n",
    "    else:\n",
    "        a[i] = (-V[i+2] + 8*V[i+1] - 8*V[i-1] + V[i-2]) / (12*h)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9d671e46",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"V\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1000x600 with 1 Axes&gt;\" isContainer=\"True\" />\n<var name=\"h\" type=\"float64\" qualifier=\"numpy\" value=\"0.08499999999999996\" shape=\"()\" />\n<var name=\"i\" type=\"int\" qualifier=\"builtins\" value=\"1955\" />\n<var name=\"n\" type=\"int\" qualifier=\"builtins\" value=\"1956\" />\n</xml>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\armad\\AppData\\Local\\Temp\\ipykernel_20744\\532897352.py:4: UserWarning: color is redundantly defined by the 'color' keyword argument and the fmt string \"ko\" (-> color='k'). The keyword argument will take precedence.\n  plt.plot(Time, a, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n"
     ]
    }
   ],
   "source": [
    "#Graficar derivada\n",
    "fig = plt.figure(figsize=(15, 6))\n",
    "plt.plot(Time, a,  color=\"blue\")\n",
    "plt.plot(Time, a, \"ko\", mew = 0.5, mfc = \"w\", color=\"red\")\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=14)\n",
    "plt.ylabel(r\"Velocidad [$m/s$]\", fontsize=14)\n",
    "plt.title(\"Velocidad de la telemetría en función del tiempo\", fontsize=16)\n",
    "plt.savefig('Velocidad_vs_Tiempo.png')\n",
    "\n",
    "#Guardar datos\n",
    "a_n = a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "34dafe31",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"V\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a_n\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1500x600 with 1 Axes&gt;\" isContainer=\"True\" />\n<var name=\"h\" type=\"float64\" qualifier=\"numpy\" value=\"0.08499999999999996\" shape=\"()\" />\n<var name=\"i\" type=\"int\" qualifier=\"builtins\" value=\"1955\" />\n<var name=\"n\" type=\"int\" qualifier=\"builtins\" value=\"1956\" />\n</xml>\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.interpolate import CubicSpline\n",
    "\n",
    "# Cálculo con spline cúbico\n",
    "cs = CubicSpline(Time, altitude)\n",
    "\n",
    "# Derivar spline para obtener velocidad\n",
    "velocity_km_s = cs.derivative()(Time)\n",
    "\n",
    "# Gráfica: Altura original vs spline\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(Time, altitude, 'o', label='Datos originales')\n",
    "plt.plot(Time, cs(Time), '-', label='Spline cúbico')\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=13)\n",
    "plt.ylabel(\"Altura [km]\", fontsize=13)\n",
    "plt.title(\"Altura vs Tiempo con spline cúbico\", fontsize=15)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b265ade1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"V\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a_n\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"cs\" type=\"CubicSpline\" qualifier=\"scipy.interpolate._cubic\" value=\"%3Cscipy.interpolate._cubic.CubicSpline object at 0x000002089336BF70&gt;\" isContainer=\"True\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1500x600 with 1 Axes&gt;\" isContainer=\"True\" />\n<var name=\"h\" type=\"float64\" qualifier=\"numpy\" value=\"0.08499999999999996\" shape=\"()\" />\n<var name=\"i\" type=\"int\" qualifier=\"builtins\" value=\"1955\" />\n<var name=\"n\" type=\"int\" qualifier=\"builtins\" value=\"1956\" />\n<var name=\"velocity_km_s\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B 1.10610824 -3.32348833  0.78030059  1.59688169  0.04736253 -2.16607865%2C  0.49546654  1.72267401 -1.88504178  1.95356681  0.3232593  -0.84466518%2C -3.01898208 -3.75882554  3.62390448  1.03535952  1.23757091 -1.67897047%2C -3.11950844  1.11875853  1.06576403  0.31438788 -0.42458137  1.76368443%2C -0.1588492   1.22359473 -0.3102825  -0.91755201  2.84125002 -0.57403036%2C -1.68436909  0.5126798   0.78749603 -1.00180254 -1.48835189 -0.04335048%2C  0.90226013  1.75076566 -0.6901329  -2.9743452  -0.83093812 -1.29683901%2C  3.51240071  0.80945648 -2.95275826  1.12815883 -0.47289944 -0.39040724%2C  0.53161431  0.54243103 -1.07087729 -0.74424489  1.76937585  0.24057655%2C -2.5939432   2.54025955 -1.35274679 -3.77640625  2.21235633  0.81066764%2C  0.06160197  0.84165865 -0.01051504  0.33964201  0.19887397  0.41359378%2C -0.39774386 -1.25630461 -1.09341683  2.97174408 -0.16064809 -2.32915171%2C  0.07178411 -1.80413856  2.12600724  1.75665657 -2.60394049 -2.73329967%2C -0.51349373  0.23031258  1.53895693  1.6025318   0...\" isContainer=\"True\" shape=\"(1956,)\" />\n</xml>\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.interpolate import CubicSpline\n",
    "\n",
    "# Cálculo con spline cúbico\n",
    "cs = CubicSpline(Time, altitude)\n",
    "\n",
    "# Derivar spline para obtener velocidad\n",
    "velocity_km_s = cs.derivative()(Time)\n",
    "\n",
    "# Gráfica: Altura original vs spline\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(Time, altitude, 'o', label='Datos originales')\n",
    "plt.plot(Time, cs(Time), '-', label='Spline cúbico')\n",
    "plt.xlabel(\"Tiempo [s]\", fontsize=13)\n",
    "plt.ylabel(\"Altura [km]\", fontsize=13)\n",
    "plt.title(\"Altura vs Tiempo con spline cúbico\", fontsize=15)\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()\n",
    "plt.savefig('Altura_vs_Tiempo-Interpolada.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "65e9a528",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xml><var name=\"_dummy_ipython_val\"  />\n<var name=\"_dummy_special_var\"  />\n<var name=\"Time\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 0.668%29 %281%2C 0.753%29 %282%2C 0.831%29 %283%2C 0.91%29 %284%2C 0.989%29 %285%2C 1.068%29 %286%2C 1.146%29 %287%2C 1.224%29 %288%2C 1.303%29 %289%2C 1.385%29 %2810%2C 1.463%29 %2811%2C 1.542%29 %2812%2C 1.62%29 %2813%2C 1.699%29 %2814%2C 1.778%29 %2815%2C 1.857%29 %2816%2C 1.935%29 %2817%2C 2.017%29 %2818%2C 2.096%29 %2819%2C 2.173%29 %2820%2C 2.252%29 %2821%2C 2.331%29 %2822%2C 2.41%29 %2823%2C 2.489%29 %2824%2C 2.567%29 %2825%2C 2.649%29 %2826%2C 2.726%29 %2827%2C 2.805%29 %2828%2C 2.884%29 %2829%2C 2.963%29 %2830%2C 3.042%29 %2831%2C 3.12%29 %2832%2C 3.198%29 %2833%2C 3.277%29 %2834%2C 3.358%29 %2835%2C 3.437%29 %2836%2C 3.516%29 %2837%2C 3.595%29 %2838%2C 3.674%29 %2839%2C 3.751%29 %2840%2C 3.83%29 %2841%2C 3.909%29 %2842%2C 3.99%29 %2843%2C 4.069%29 %2844%2C 4.148%29 %2845%2C 4.227%29 %2846%2C 4.305%29 %2847%2C 4.383%29 %2848%2C 4.462%29 %2849%2C 4.541%29 %2850%2C 4.622%29 %2851%2C 4.701%29 %2852%2C 4.78%29 %2853%2C 4.858%29 %2854%2C 4.937%29 %2855%2C 5.016%29 %2856%2C 5.094%29 %2857%2C 5.173%29 %2858%2C 5.255%29 %2859%2C 5.332%29 %2860%2C 5.411%29 %2861%2C 5.49%29 %2862%2C 5.569%29 %2863%2C 5.648%29 %2864%2C 5.726%29 %2865%2C 5.805%29 %2866%2C 5.886%29 %2867%2C 5.964%29 %2868%2C 6.043%29 %2869%2C 6.122%29 %2870%2C 6.201%29 %2871%2C 6.28%29 %2872%2C 6.358%29 %2873%2C 6.436%29 %2874%2C 6.515%29 %2875%2C 6.596%29 %2876%2C 6.675%29 %2877%2C 6.754%29 %2878%2C 6.833%29 %2879%2C 6.912%29 %2880%2C 6.989%29 %2881%2C 7.068%29 %2882%2C 7.147%29 %2883%2C 7.228%29 %2884%2C 7.307%29...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"V\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"a_n\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B-1.94117647e%2B00 -1.82352941e%2B00  4.31372549e-01  1.46078431e%2B00%2C -5.88235294e-02 -1.67647059e%2B00  3.82352941e-01  1.15686275e%2B00%2C -1.07843137e%2B00  1.29411765e%2B00  4.70588235e-01 -8.82352941e-01%2C -2.92156863e%2B00 -2.85294118e%2B00  2.56862745e%2B00  1.45098039e%2B00%2C  9.90196078e-01 -1.43137255e%2B00 -2.59803922e%2B00  6.66666667e-01%2C  1.06862745e%2B00  2.35294118e-01 -1.37254902e-01  1.26470588e%2B00%2C  1.96078431e-01  8.33333333e-01 -3.13725490e-01 -4.60784314e-01%2C  2.09803922e%2B00 -3.13725490e-01 -1.41176471e%2B00  3.43137255e-01%2C  6.47058824e-01 -9.01960784e-01 -1.34313725e%2B00 -1.07843137e-01%2C  9.31372549e-01  1.45098039e%2B00 -6.27450980e-01 -2.45098039e%2B00%2C -1.15686275e%2B00 -6.96078431e-01  2.71568627e%2B00  6.96078431e-01%2C -2.16666667e%2B00  5.19607843e-01 -2.25490196e-01 -3.43137255e-01%2C  4.70588235e-01  3.72549020e-01 -9.21568627e-01 -5.19607843e-01%2C  1.39215686e%2B00  2.94117647e-02 -1.72549020e%2B00  1.62745098e%2B00%2C -1.20588235e%2B00 -2.87254902e%2B00  1.40196078e%2B00  9.01960784e-01%2C  1.66666667e-01  6.27450...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"altitude\" type=\"Series\" qualifier=\"pandas.core.series\" value=\"%280%2C 2031.03%29 %281%2C 2030.87%29 %282%2C 2030.72%29 %283%2C 2030.91%29 %284%2C 2030.91%29 %285%2C 2030.9%29 %286%2C 2030.7%29 %287%2C 2030.94%29 %288%2C 2030.84%29 %289%2C 2030.84%29 %2810%2C 2031.0%29 %2811%2C 2030.9%29 %2812%2C 2030.84%29 %2813%2C 2030.46%29 %2814%2C 2030.46%29 %2815%2C 2030.77%29 %2816%2C 2030.7%29 %2817%2C 2030.9%29 %2818%2C 2030.49%29 %2819%2C 2030.55%29 %2820%2C 2030.55%29 %2821%2C 2030.7%29 %2822%2C 2030.6%29 %2823%2C 2030.71%29 %2824%2C 2030.77%29 %2825%2C 2030.77%29 %2826%2C 2030.88%29 %2827%2C 2030.74%29 %2828%2C 2030.85%29 %2829%2C 2031.0%29 %2830%2C 2030.82%29 %2831%2C 2030.82%29 %2832%2C 2030.85%29 %2833%2C 2030.89%29 %2834%2C 2030.72%29 %2835%2C 2030.7%29 %2836%2C 2030.7%29 %2837%2C 2030.84%29 %2838%2C 2030.89%29 %2839%2C 2030.74%29 %2840%2C 2030.54%29 %2841%2C 2030.54%29 %2842%2C 2030.47%29 %2843%2C 2030.89%29 %2844%2C 2030.57%29 %2845%2C 2030.63%29 %2846%2C 2030.6%29 %2847%2C 2030.6%29 %2848%2C 2030.56%29 %2849%2C 2030.66%29 %2850%2C 2030.6%29 %2851%2C 2030.54%29 %2852%2C 2030.54%29 %2853%2C 2030.71%29 %2854%2C 2030.54%29 %2855%2C 2030.51%29 %2856%2C 2030.7%29 %2857%2C 2030.33%29 %2858%2C 2030.33%29 %2859%2C 2030.48%29 %2860%2C 2030.47%29 %2861%2C 2030.53%29 %2862%2C 2030.56%29 %2863%2C 2030.56%29 %2864%2C 2030.6%29 %2865%2C 2030.6%29 %2866%2C 2030.64%29 %2867%2C 2030.54%29 %2868%2C 2030.47%29 %2869%2C 2030.47%29 %2870%2C 2030.75%29 %2871%2C 2030.47%29 %2872%2C 2030.5%29 %2873%2C 2...\" isContainer=\"True\" shape=\"(1956,)\" />\n<var name=\"cs\" type=\"CubicSpline\" qualifier=\"scipy.interpolate._cubic\" value=\"%3Cscipy.interpolate._cubic.CubicSpline object at 0x000002089216C550&gt;\" isContainer=\"True\" />\n<var name=\"df\" type=\"DataFrame\" qualifier=\"pandas.core.frame\" value=\"%5B%27Altitude %5Bm%5D%27%2C %27Time%5Cxa0%5Bs%5D%27%5D %5B0       2031.03     0.668%5D %5B1       2030.87     0.753%5D %5B2       2030.72     0.831%5D\" isContainer=\"True\" shape=\"(1956, 2)\" />\n<var name=\"fig\" type=\"Figure\" qualifier=\"matplotlib.figure\" value=\"%3CFigure size 1500x600 with 1 Axes&gt;\" isContainer=\"True\" />\n<var name=\"h\" type=\"float64\" qualifier=\"numpy\" value=\"0.08499999999999996\" shape=\"()\" />\n<var name=\"i\" type=\"int\" qualifier=\"builtins\" value=\"1955\" />\n<var name=\"n\" type=\"int\" qualifier=\"builtins\" value=\"1956\" />\n<var name=\"velocity_km_s\" type=\"ndarray\" qualifier=\"numpy\" value=\"%5B 1.10610824 -3.32348833  0.78030059  1.59688169  0.04736253 -2.16607865%2C  0.49546654  1.72267401 -1.88504178  1.95356681  0.3232593  -0.84466518%2C -3.01898208 -3.75882554  3.62390448  1.03535952  1.23757091 -1.67897047%2C -3.11950844  1.11875853  1.06576403  0.31438788 -0.42458137  1.76368443%2C -0.1588492   1.22359473 -0.3102825  -0.91755201  2.84125002 -0.57403036%2C -1.68436909  0.5126798   0.78749603 -1.00180254 -1.48835189 -0.04335048%2C  0.90226013  1.75076566 -0.6901329  -2.9743452  -0.83093812 -1.29683901%2C  3.51240071  0.80945648 -2.95275826  1.12815883 -0.47289944 -0.39040724%2C  0.53161431  0.54243103 -1.07087729 -0.74424489  1.76937585  0.24057655%2C -2.5939432   2.54025955 -1.35274679 -3.77640625  2.21235633  0.81066764%2C  0.06160197  0.84165865 -0.01051504  0.33964201  0.19887397  0.41359378%2C -0.39774386 -1.25630461 -1.09341683  2.97174408 -0.16064809 -2.32915171%2C  0.07178411 -1.80413856  2.12600724  1.75665657 -2.60394049 -2.73329967%2C -0.51349373  0.23031258  1.53895693  1.6025318   0...\" isContainer=\"True\" shape=\"(1956,)\" />\n</xml>\n"
     ]
    }
   ],
   "source": [
    "#Filtrar\n",
    "w = 9\n",
    "n_pol = 3\n",
    "v_f = savgol_filter(altitude, w, n_pol)\n",
    "v_f_f = savgol_filter(v_f, w, n_pol)\n",
    "V = v_f_f / 3.6\n",
    "v_f = v_f_f\n",
    "\n",
    "#Depurar\n",
    "for i in range(n):\n",
    "    if V[i] < 0:\n",
    "        V[i] = 0\n",
    "V[0] = 0\n",
    "V[-1] = 0"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
